package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for pointwise_norm kernel
var pointwise_norm_code cu.Function

// Stores the arguments for pointwise_norm kernel invocation
type pointwise_norm_args_t struct {
	arg_dst    unsafe.Pointer
	arg_inputx unsafe.Pointer
	arg_inputy unsafe.Pointer
	arg_inputz unsafe.Pointer
	arg_Nx     int
	arg_Ny     int
	arg_Nz     int
	arg_PBC    byte
	argptr     [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for pointwise_norm kernel invocation
var pointwise_norm_args pointwise_norm_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	pointwise_norm_args.argptr[0] = unsafe.Pointer(&pointwise_norm_args.arg_dst)
	pointwise_norm_args.argptr[1] = unsafe.Pointer(&pointwise_norm_args.arg_inputx)
	pointwise_norm_args.argptr[2] = unsafe.Pointer(&pointwise_norm_args.arg_inputy)
	pointwise_norm_args.argptr[3] = unsafe.Pointer(&pointwise_norm_args.arg_inputz)
	pointwise_norm_args.argptr[4] = unsafe.Pointer(&pointwise_norm_args.arg_Nx)
	pointwise_norm_args.argptr[5] = unsafe.Pointer(&pointwise_norm_args.arg_Ny)
	pointwise_norm_args.argptr[6] = unsafe.Pointer(&pointwise_norm_args.arg_Nz)
	pointwise_norm_args.argptr[7] = unsafe.Pointer(&pointwise_norm_args.arg_PBC)
}

// Wrapper for pointwise_norm CUDA kernel, asynchronous.
func k_pointwise_norm_async(dst unsafe.Pointer, inputx unsafe.Pointer, inputy unsafe.Pointer, inputz unsafe.Pointer, Nx int, Ny int, Nz int, PBC byte, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("pointwise_norm")
	}

	pointwise_norm_args.Lock()
	defer pointwise_norm_args.Unlock()

	if pointwise_norm_code == 0 {
		pointwise_norm_code = fatbinLoad(pointwise_norm_map, "pointwise_norm")
	}

	pointwise_norm_args.arg_dst = dst
	pointwise_norm_args.arg_inputx = inputx
	pointwise_norm_args.arg_inputy = inputy
	pointwise_norm_args.arg_inputz = inputz
	pointwise_norm_args.arg_Nx = Nx
	pointwise_norm_args.arg_Ny = Ny
	pointwise_norm_args.arg_Nz = Nz
	pointwise_norm_args.arg_PBC = PBC

	args := pointwise_norm_args.argptr[:]
	cu.LaunchKernel(pointwise_norm_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("pointwise_norm")
	}
}

// maps compute capability on PTX code for pointwise_norm kernel.
var pointwise_norm_map = map[int]string{0: "",
	50: pointwise_norm_ptx_50,
	52: pointwise_norm_ptx_52,
	53: pointwise_norm_ptx_53,
	60: pointwise_norm_ptx_60,
	61: pointwise_norm_ptx_61,
	62: pointwise_norm_ptx_62,
	70: pointwise_norm_ptx_70,
	72: pointwise_norm_ptx_72,
	75: pointwise_norm_ptx_75,
	80: pointwise_norm_ptx_80}

// pointwise_norm PTX code for various compute capabilities.
const (
	pointwise_norm_ptx_50 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_50
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_52 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_52
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_53 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_53
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_60 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_60
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_61 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_61
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_62 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_62
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_70 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_70
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_72 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_72
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_75 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_75
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
	pointwise_norm_ptx_80 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_80
.address_size 64

	// .globl	pointwise_norm

.visible .entry pointwise_norm(
	.param .u64 pointwise_norm_param_0,
	.param .u64 pointwise_norm_param_1,
	.param .u64 pointwise_norm_param_2,
	.param .u64 pointwise_norm_param_3,
	.param .u32 pointwise_norm_param_4,
	.param .u32 pointwise_norm_param_5,
	.param .u32 pointwise_norm_param_6,
	.param .u8 pointwise_norm_param_7
)
{
	.reg .pred 	%p<21>;
	.reg .f32 	%f<34>;
	.reg .b32 	%r<33>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd5, [pointwise_norm_param_0];
	ld.param.u64 	%rd6, [pointwise_norm_param_1];
	ld.param.u64 	%rd7, [pointwise_norm_param_2];
	ld.param.u64 	%rd8, [pointwise_norm_param_3];
	ld.param.u32 	%r10, [pointwise_norm_param_4];
	ld.param.u32 	%r11, [pointwise_norm_param_5];
	ld.param.u32 	%r12, [pointwise_norm_param_6];
	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r1, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.y;
	mov.u32 	%r17, %ctaid.y;
	mov.u32 	%r18, %tid.y;
	mad.lo.s32 	%r2, %r17, %r16, %r18;
	mov.u32 	%r19, %ntid.z;
	mov.u32 	%r20, %ctaid.z;
	mov.u32 	%r21, %tid.z;
	mad.lo.s32 	%r3, %r20, %r19, %r21;
	setp.ge.s32 	%p1, %r1, %r10;
	setp.ge.s32 	%p2, %r2, %r11;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r12;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_17;

	cvta.to.global.u64 	%rd9, %rd6;
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd8;
	cvta.to.global.u64 	%rd3, %rd5;
	mad.lo.s32 	%r23, %r3, %r11, %r2;
	mad.lo.s32 	%r24, %r23, %r10, %r1;
	cvt.s64.s32 	%rd4, %r24;
	mul.wide.s32 	%rd10, %r24, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f25, [%rd11];
	mov.f32 	%f27, 0f3F800000;
	mov.u32 	%r30, 2;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mul.rn.f32 	%f25, %f25, %f25;

$L__BB0_2:
	and.b32  	%r25, %r30, 1;
	setp.eq.b32 	%p6, %r25, 1;
	mov.pred 	%p7, 0;
	xor.pred  	%p8, %p6, %p7;
	not.pred 	%p9, %p8;
	@%p9 bra 	$L__BB0_4;

	mul.rn.f32 	%f27, %f27, %f25;

$L__BB0_4:
	shr.u32 	%r30, %r30, 1;
	setp.eq.s32 	%p10, %r30, 0;
	@%p10 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	shl.b64 	%rd12, %rd4, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.nc.f32 	%f28, [%rd13];
	mov.f32 	%f30, 0f3F800000;
	mov.u32 	%r31, 2;
	bra.uni 	$L__BB0_7;

$L__BB0_10:
	mul.rn.f32 	%f28, %f28, %f28;

$L__BB0_7:
	and.b32  	%r27, %r31, 1;
	setp.eq.b32 	%p11, %r27, 1;
	mov.pred 	%p12, 0;
	xor.pred  	%p13, %p11, %p12;
	not.pred 	%p14, %p13;
	@%p14 bra 	$L__BB0_9;

	mul.rn.f32 	%f30, %f30, %f28;

$L__BB0_9:
	shr.u32 	%r31, %r31, 1;
	setp.eq.s32 	%p15, %r31, 0;
	@%p15 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;

$L__BB0_11:
	add.f32 	%f13, %f27, %f30;
	add.s64 	%rd15, %rd2, %rd12;
	ld.global.nc.f32 	%f31, [%rd15];
	mov.f32 	%f33, 0f3F800000;
	mov.u32 	%r32, 2;
	bra.uni 	$L__BB0_12;

$L__BB0_15:
	mul.rn.f32 	%f31, %f31, %f31;

$L__BB0_12:
	and.b32  	%r29, %r32, 1;
	setp.eq.b32 	%p16, %r29, 1;
	mov.pred 	%p17, 0;
	xor.pred  	%p18, %p16, %p17;
	not.pred 	%p19, %p18;
	@%p19 bra 	$L__BB0_14;

	mul.rn.f32 	%f33, %f33, %f31;

$L__BB0_14:
	shr.u32 	%r32, %r32, 1;
	setp.eq.s32 	%p20, %r32, 0;
	@%p20 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_16:
	add.f32 	%f23, %f13, %f33;
	sqrt.rn.f32 	%f24, %f23;
	add.s64 	%rd17, %rd3, %rd12;
	st.global.f32 	[%rd17], %f24;

$L__BB0_17:
	ret;

}

`
)
