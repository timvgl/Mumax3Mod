package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for reverseX kernel
var reverseX_code cu.Function

// Stores the arguments for reverseX kernel invocation
type reverseX_args_t struct {
	arg_data_out unsafe.Pointer
	arg_data_in  unsafe.Pointer
	arg_Nx       int
	arg_Ny       int
	arg_Nz       int
	argptr       [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for reverseX kernel invocation
var reverseX_args reverseX_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	reverseX_args.argptr[0] = unsafe.Pointer(&reverseX_args.arg_data_out)
	reverseX_args.argptr[1] = unsafe.Pointer(&reverseX_args.arg_data_in)
	reverseX_args.argptr[2] = unsafe.Pointer(&reverseX_args.arg_Nx)
	reverseX_args.argptr[3] = unsafe.Pointer(&reverseX_args.arg_Ny)
	reverseX_args.argptr[4] = unsafe.Pointer(&reverseX_args.arg_Nz)
}

// Wrapper for reverseX CUDA kernel, asynchronous.
func k_reverseX_async(data_out unsafe.Pointer, data_in unsafe.Pointer, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("reverseX")
	}

	reverseX_args.Lock()
	defer reverseX_args.Unlock()

	if reverseX_code == 0 {
		reverseX_code = fatbinLoad(reverseX_map, "reverseX")
	}

	reverseX_args.arg_data_out = data_out
	reverseX_args.arg_data_in = data_in
	reverseX_args.arg_Nx = Nx
	reverseX_args.arg_Ny = Ny
	reverseX_args.arg_Nz = Nz

	args := reverseX_args.argptr[:]
	cu.LaunchKernel(reverseX_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("reverseX")
	}
}

// maps compute capability on PTX code for reverseX kernel.
var reverseX_map = map[int]string{0: "",
	50: reverseX_ptx_50,
	52: reverseX_ptx_52,
	53: reverseX_ptx_53,
	60: reverseX_ptx_60,
	61: reverseX_ptx_61,
	62: reverseX_ptx_62,
	70: reverseX_ptx_70,
	72: reverseX_ptx_72,
	75: reverseX_ptx_75,
	80: reverseX_ptx_80}

// reverseX PTX code for various compute capabilities.
const (
	reverseX_ptx_50 = `
.version 8.4
.target sm_50
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_52 = `
.version 8.4
.target sm_52
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_53 = `
.version 8.4
.target sm_53
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_60 = `
.version 8.4
.target sm_60
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_61 = `
.version 8.4
.target sm_61
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_62 = `
.version 8.4
.target sm_62
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_70 = `
.version 8.4
.target sm_70
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_72 = `
.version 8.4
.target sm_72
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_75 = `
.version 8.4
.target sm_75
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
	reverseX_ptx_80 = `
.version 8.4
.target sm_80
.address_size 64

	// .globl	reverseX

.visible .entry reverseX(
	.param .u64 reverseX_param_0,
	.param .u64 reverseX_param_1,
	.param .u32 reverseX_param_2,
	.param .u32 reverseX_param_3,
	.param .u32 reverseX_param_4
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [reverseX_param_0];
	ld.param.u64 	%rd2, [reverseX_param_1];
	ld.param.u32 	%r4, [reverseX_param_2];
	ld.param.u32 	%r5, [reverseX_param_3];
	ld.param.u32 	%r6, [reverseX_param_4];
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r8, %r7, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	cvta.to.global.u64 	%rd4, %rd2;
	shl.b32 	%r16, %r1, 1;
	shl.b32 	%r17, %r4, 2;
	sub.s32 	%r18, %r17, %r16;
	mad.lo.s32 	%r19, %r3, %r5, %r2;
	mul.lo.s32 	%r20, %r19, %r17;
	add.s32 	%r21, %r18, %r20;
	add.s32 	%r22, %r20, %r16;
	add.s32 	%r23, %r21, -2;
	mul.wide.s32 	%rd5, %r22, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.wide.s32 	%rd7, %r23, 4;
	add.s64 	%rd8, %rd4, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	ld.global.nc.f32 	%f4, [%rd8+4];
	add.s64 	%rd9, %rd3, %rd5;
	st.global.f32 	[%rd9], %f3;
	st.global.f32 	[%rd9+4], %f4;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f1;
	st.global.f32 	[%rd10+4], %f2;

$L__BB0_2:
	ret;

}

`
)
