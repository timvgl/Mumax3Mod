package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for extractXSlice kernel
var extractXSlice_code cu.Function

// Stores the arguments for extractXSlice kernel invocation
type extractXSlice_args_t struct {
	arg_output unsafe.Pointer
	arg_input  unsafe.Pointer
	arg_X      int
	arg_Y      int
	arg_Z      int
	arg_y      int
	arg_z      int
	argptr     [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for extractXSlice kernel invocation
var extractXSlice_args extractXSlice_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	extractXSlice_args.argptr[0] = unsafe.Pointer(&extractXSlice_args.arg_output)
	extractXSlice_args.argptr[1] = unsafe.Pointer(&extractXSlice_args.arg_input)
	extractXSlice_args.argptr[2] = unsafe.Pointer(&extractXSlice_args.arg_X)
	extractXSlice_args.argptr[3] = unsafe.Pointer(&extractXSlice_args.arg_Y)
	extractXSlice_args.argptr[4] = unsafe.Pointer(&extractXSlice_args.arg_Z)
	extractXSlice_args.argptr[5] = unsafe.Pointer(&extractXSlice_args.arg_y)
	extractXSlice_args.argptr[6] = unsafe.Pointer(&extractXSlice_args.arg_z)
}

// Wrapper for extractXSlice CUDA kernel, asynchronous.
func k_extractXSlice_async(output unsafe.Pointer, input unsafe.Pointer, X int, Y int, Z int, y int, z int, key string, cfg *config) {
	if Synchronous { // debug
		SyncFFT_T(key)
		timer.Start("extractXSlice" + key)
	}

	extractXSlice_args.Lock()
	defer extractXSlice_args.Unlock()

	if extractXSlice_code == 0 {
		extractXSlice_code = fatbinLoad(extractXSlice_map, "extractXSlice")
	}

	extractXSlice_args.arg_output = output
	extractXSlice_args.arg_input = input
	extractXSlice_args.arg_X = X
	extractXSlice_args.arg_Y = Y
	extractXSlice_args.arg_Z = Z
	extractXSlice_args.arg_y = y
	extractXSlice_args.arg_z = z

	args := extractXSlice_args.argptr[:]
	cu.LaunchKernel(extractXSlice_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, Get_Stream(key), args)

	if Synchronous { // debug
		SyncFFT_T(key)
		timer.Stop("extractXSlice" + key)
	}
}

// maps compute capability on PTX code for extractXSlice kernel.
var extractXSlice_map = map[int]string{0: "",
	50: extractXSlice_ptx_50,
	52: extractXSlice_ptx_52,
	53: extractXSlice_ptx_53,
	60: extractXSlice_ptx_60,
	61: extractXSlice_ptx_61,
	62: extractXSlice_ptx_62,
	70: extractXSlice_ptx_70,
	72: extractXSlice_ptx_72,
	75: extractXSlice_ptx_75,
	80: extractXSlice_ptx_80}

// extractXSlice PTX code for various compute capabilities.
const (
	extractXSlice_ptx_50 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_50
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_52 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_52
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_53 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_53
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_60 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_60
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_61 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_61
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_62 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_62
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_70 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_70
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_72 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_72
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_75 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_75
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
	extractXSlice_ptx_80 = `
<<<<<<< HEAD
.version 8.5
=======
.version 8.4
>>>>>>> origin/region_solver
.target sm_80
.address_size 64

	// .globl	extractXSlice

.visible .entry extractXSlice(
	.param .u64 extractXSlice_param_0,
	.param .u64 extractXSlice_param_1,
	.param .u32 extractXSlice_param_2,
	.param .u32 extractXSlice_param_3,
	.param .u32 extractXSlice_param_4,
	.param .u32 extractXSlice_param_5,
	.param .u32 extractXSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<12>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractXSlice_param_0];
	ld.param.u64 	%rd2, [extractXSlice_param_1];
	ld.param.u32 	%r6, [extractXSlice_param_2];
	ld.param.u32 	%r2, [extractXSlice_param_3];
	ld.param.u32 	%r3, [extractXSlice_param_4];
	ld.param.u32 	%r4, [extractXSlice_param_5];
	ld.param.u32 	%r5, [extractXSlice_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	setp.ge.s32 	%p1, %r1, %r6;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r10, %r1, %r2, %r4;
	mad.lo.s32 	%r11, %r10, %r3, %r5;
	mul.wide.s32 	%rd4, %r11, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB0_2:
	ret;

}
	// .globl	extractYSlice
.visible .entry extractYSlice(
	.param .u64 extractYSlice_param_0,
	.param .u64 extractYSlice_param_1,
	.param .u32 extractYSlice_param_2,
	.param .u32 extractYSlice_param_3,
	.param .u32 extractYSlice_param_4,
	.param .u32 extractYSlice_param_5,
	.param .u32 extractYSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractYSlice_param_0];
	ld.param.u64 	%rd2, [extractYSlice_param_1];
	ld.param.u32 	%r2, [extractYSlice_param_3];
	ld.param.u32 	%r3, [extractYSlice_param_4];
	ld.param.u32 	%r4, [extractYSlice_param_5];
	ld.param.u32 	%r5, [extractYSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r1;
	mad.lo.s32 	%r10, %r9, %r3, %r5;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB1_2:
	ret;

}
	// .globl	extractZSlice
.visible .entry extractZSlice(
	.param .u64 extractZSlice_param_0,
	.param .u64 extractZSlice_param_1,
	.param .u32 extractZSlice_param_2,
	.param .u32 extractZSlice_param_3,
	.param .u32 extractZSlice_param_4,
	.param .u32 extractZSlice_param_5,
	.param .u32 extractZSlice_param_6
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [extractZSlice_param_0];
	ld.param.u64 	%rd2, [extractZSlice_param_1];
	ld.param.u32 	%r2, [extractZSlice_param_3];
	ld.param.u32 	%r3, [extractZSlice_param_4];
	ld.param.u32 	%r4, [extractZSlice_param_5];
	ld.param.u32 	%r5, [extractZSlice_param_6];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	$L__BB2_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r9, %r4, %r2, %r5;
	mad.lo.s32 	%r10, %r9, %r3, %r1;
	mul.wide.s32 	%rd4, %r10, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

$L__BB2_2:
	ret;

}

`
)
