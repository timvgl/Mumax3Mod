package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for mul_mslice kernel
var mul_mslice_code cu.Function

// Stores the arguments for mul_mslice kernel invocation
type mul_mslice_args_t struct {
	arg_dst   unsafe.Pointer
	arg_a_    unsafe.Pointer
	arg_a_mul float32
	arg_b_    unsafe.Pointer
	arg_b_mul float32
	arg_N     int
	argptr    [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for mul_mslice kernel invocation
var mul_mslice_args mul_mslice_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	mul_mslice_args.argptr[0] = unsafe.Pointer(&mul_mslice_args.arg_dst)
	mul_mslice_args.argptr[1] = unsafe.Pointer(&mul_mslice_args.arg_a_)
	mul_mslice_args.argptr[2] = unsafe.Pointer(&mul_mslice_args.arg_a_mul)
	mul_mslice_args.argptr[3] = unsafe.Pointer(&mul_mslice_args.arg_b_)
	mul_mslice_args.argptr[4] = unsafe.Pointer(&mul_mslice_args.arg_b_mul)
	mul_mslice_args.argptr[5] = unsafe.Pointer(&mul_mslice_args.arg_N)
}

// Wrapper for mul_mslice CUDA kernel, asynchronous.
func k_mul_mslice_async(dst unsafe.Pointer, a_ unsafe.Pointer, a_mul float32, b_ unsafe.Pointer, b_mul float32, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("mul_mslice")
	}

	mul_mslice_args.Lock()
	defer mul_mslice_args.Unlock()

	if mul_mslice_code == 0 {
		mul_mslice_code = fatbinLoad(mul_mslice_map, "mul_mslice")
	}

	mul_mslice_args.arg_dst = dst
	mul_mslice_args.arg_a_ = a_
	mul_mslice_args.arg_a_mul = a_mul
	mul_mslice_args.arg_b_ = b_
	mul_mslice_args.arg_b_mul = b_mul
	mul_mslice_args.arg_N = N

	args := mul_mslice_args.argptr[:]
	cu.LaunchKernel(mul_mslice_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("mul_mslice")
	}
}

// maps compute capability on PTX code for mul_mslice kernel.
var mul_mslice_map = map[int]string{0: "",
	50: mul_mslice_ptx_50,
	52: mul_mslice_ptx_52,
	53: mul_mslice_ptx_53,
	60: mul_mslice_ptx_60,
	61: mul_mslice_ptx_61,
	62: mul_mslice_ptx_62,
	70: mul_mslice_ptx_70,
	72: mul_mslice_ptx_72,
	75: mul_mslice_ptx_75,
	80: mul_mslice_ptx_80}

// mul_mslice PTX code for various compute capabilities.
const (
	mul_mslice_ptx_50 = `
.version 8.2
.target sm_50
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_52 = `
.version 8.2
.target sm_52
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_53 = `
.version 8.2
.target sm_53
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_60 = `
.version 8.2
.target sm_60
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_61 = `
.version 8.2
.target sm_61
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_62 = `
.version 8.2
.target sm_62
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_70 = `
.version 8.2
.target sm_70
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_72 = `
.version 8.2
.target sm_72
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_75 = `
.version 8.2
.target sm_75
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
	mul_mslice_ptx_80 = `
.version 8.2
.target sm_80
.address_size 64

	// .globl	mul_mslice

.visible .entry mul_mslice(
	.param .u64 mul_mslice_param_0,
	.param .u64 mul_mslice_param_1,
	.param .f32 mul_mslice_param_2,
	.param .u64 mul_mslice_param_3,
	.param .f32 mul_mslice_param_4,
	.param .u32 mul_mslice_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [mul_mslice_param_0];
	ld.param.u64 	%rd2, [mul_mslice_param_1];
	ld.param.f32 	%f10, [mul_mslice_param_2];
	ld.param.u64 	%rd3, [mul_mslice_param_3];
	ld.param.f32 	%f11, [mul_mslice_param_4];
	ld.param.u32 	%r2, [mul_mslice_param_5];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_6;

	setp.eq.s64 	%p2, %rd2, 0;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f7, [%rd6];
	mul.f32 	%f10, %f7, %f10;

$L__BB0_3:
	setp.eq.s64 	%p3, %rd3, 0;
	@%p3 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r1, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f8, [%rd9];
	mul.f32 	%f11, %f8, %f11;

$L__BB0_5:
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r1, 4;
	add.s64 	%rd12, %rd10, %rd11;
	mul.f32 	%f9, %f10, %f11;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
)
